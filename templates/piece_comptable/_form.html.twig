<div class="header">
    <h1 class="header-title">
        Piece Comptable
    </h1>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="{{ path ('app_tiers_index')}}">Dashboard</a></li>
            <li class="breadcrumb-item"><a href="{{ path ('app_piece_comptable_index')}}">Piece Comptable</a></li>
        </ol>
    </nav>
</div>
{{ form_start(form, {'attr': {'id': 'form_piece'}}) }}
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12 col-lg-12">
                        <div class="row">
                            <div class="mb-3 col-md-2">
                                {{ form_label(form.journal) }}
                                {{ form_widget(form.journal, {'attr': {'class': 'form-control', 'onchange': 'changeMonnaie(this.value)' }}) }}
                            </div>

                            <div class="mb-3 col-md-2">
                                {{ form_label(form.datepiece) }}
                                {{ form_widget(form.datepiece, {'attr': {'class': 'form-control' }}) }}
                            </div>


                            <div class="mb-3 col-md-2">
                                {{ form_label(form.monnaie) }}
                                <div id="monnaie" class="custom-select">
                                    {% if form.monnaie.vars.value is empty %}
                                        {{ form_widget(form.monnaie, {'attr': {'class': 'form-control'},'value':monnaie}) }}
                                    {% else %}
                                        {{ form_widget(form.monnaie, {'attr': {'class': 'form-control'}}) }}
                                    {% endif %}
                                </div>
                            </div>

                            <div class="mb-3 col-md-2">
                                {{ form_label(form.tauxchange) }}
                                {% if form.tauxchange.vars.value is empty %}
                                    {{ form_widget(form.tauxchange, {'attr': {'class': 'form-control', 'value': '1'}}) }}
                                {% else %}
                                    {{ form_widget(form.tauxchange, {'attr': {'class': 'form-control'}}) }}
                                {% endif %}
                            </div>
                            <div class="mb-3 col-md-2">
                                {{ form_label(form.libelle) }}
                                {{ form_widget(form.libelle, {'attr': {'class': 'form-control'}}) }}
                            </div>
                            <div class="mb-3 col-md-2">
                                {{ form_label(form.numero_pc) }}
                                {{ form_widget(form.numero_pc, {'attr': {'class': 'form-control','id':'numero_pc'}}) }}
                            </div>
                        </div>
                        <br/>
                        <div class="row">

                            <div class="col-md-6">
                                Hide columns:
                                <label><input type="checkbox" class="toggle-column" data-column="0"> Compte</label>
                                <label><input type="checkbox" class="toggle-column" data-column="1"> Tier </label>
                                <label><input type="checkbox" class="toggle-column" data-column="2"> Montant</label>
                                <label><input type="checkbox" class="toggle-column" data-column="3"> Sens</label>
                                <label><input type="checkbox" class="toggle-column" data-column="4"> Libelle</label>
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createAccountModal">
                                    Crée un compte
                                </button>
                            </div>
                            <div class="col-md-2">
                                <button id="ajouter-ecritures" class="btn btn-primary float-end">Ajouter une écriture</button>
                            </div>
                            <div class="col-md-2">
                                <button type="submit" class="btn btn-success px-5">{{ button_label|default('Enregistrer') }}</button>
                            </div>
                        </div><br/>
                        <table id="ecritures" class="table">
                            <thead class="thead-dark">
                            <tr>
                                <th scope="col">Compte</th>
                                <th scope="col">Tier</th>
                                <th scope="col">Montant</th>
                                <th scope="col">Sens</th>
                                <th scope="col">Libelle</th>
                                <th scope="col" width="2%"></th>
                            </tr>
                            </thead>
                            <tbody data-prototype="{{ form_row(form.Ecritures.vars.prototype.compte)|e('html_attr')|raw }}{{ form_row(form.Ecritures.vars.prototype.tier)|e('html_attr')|raw }}{{ form_row(form.Ecritures.vars.prototype.montant)|e('html_attr')|raw }}{{ form_row(form.Ecritures.vars.prototype.sens)|e('html_attr')|raw }}{{ form_row(form.Ecritures.vars.prototype.libelle)|e('html_attr')|raw }}">
                            {% for Ecritures in form.Ecritures %}
                                <tr id="ecriture_{{ Ecritures.vars['data'].id }}">
                                    <td>{{ form_widget(Ecritures.compte, {'attr': {'class': 'form-control'}}) }}</td>
                                    <td>{{ form_widget(Ecritures.tier, {'attr': {'class': 'form-control'}}) }}</td>
                                    <td>{{ form_widget(Ecritures.montant, {'attr': {'class': 'form-control'}}) }}</td>
                                    <td>{{ form_widget(Ecritures.sens, {'attr': {'class': 'form-control'}}) }}</td>
                                    <td>{{ form_widget(Ecritures.libelle, {'attr': {'class': 'form-control'}}) }}</td>
                                    <td>
                                        <button type="button" class="btn" onclick="deleteEcritures({{ Ecritures.vars['data'].id }})"><i class="fas fa-trash"></i></button>
                                    </td>
                                </tr>
                            {% endfor %}
                            </tbody>
                            <tfoot>
                            <tr id="">
                                <th colspan="2"></th>
                                <th id="">Débit</th>
                                <th id="">Crédit</th>
                                <th id="">Balance</th>
                                <th></th>
                            </tr>
                            <tr id="footerRow">
                                <td colspan="2"></td>
                                <td id="debitTotal">0</td>
                                <td id="creditTotal">0</td>
                                <td id="balance">0</td>
                                <td></td>
                            </tr>
                            </tfoot>
                        </table><br/>

                        <div class="row">
                            <div class="col-md-10">
                            </div>
                            <div class="col-md-2">
                                <button type="submit" id='buttonsubmit2' class="btn btn-success px-5">{{ button_label|default('Enregistrer') }}</button>
                            </div>
                        </div>
                        <br/>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


{{ form_end(form) }}
<!-- Modal for creating an account -->
<div class="modal fade" id="createAccountModal" tabindex="-1" aria-labelledby="createAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createAccountModalLabel">Create Account</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                {{ form_start(formAccount, {'attr': {'id': 'account_form'}}) }}
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-12 col-lg-12">
                                        <div class="mb-3">
                                            {{ form_label(formAccount.cp_code) }}
                                            {{ form_widget(formAccount.cp_code, {'attr': {'class': 'form-control', 'id': 'cp_code'}}) }}
                                        </div>

                                        <div class="mb-3">
                                            {{ form_label(formAccount.cp_lib) }}
                                            {{ form_widget(formAccount.cp_lib, {'attr': {'class': 'form-control','id': 'cp_lib'}}) }}
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(formAccount.cp_type_tiers) }}
                                            {{ form_widget(formAccount.cp_type_tiers, {'attr': {'class': 'form-control'}}) }}
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(formAccount.cp_sens) }}
                                            {{ form_widget(formAccount.cp_sens, {'attr': {'class': 'form-control'}}) }}
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(formAccount.cp_actif) }}
                                            {{ form_widget(formAccount.cp_actif, {'attr': {'class': 'form-control'}}) }}

                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(formAccount.cp_analytique) }}
                                            {{ form_widget(formAccount.cp_analytique, {'attr': {'class': 'form-control'}}) }}
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(formAccount.societe) }}
                                            {{ form_widget(formAccount.societe, {'attr': {'class': 'form-control'}}) }}
                                        </div>
                                        <div class="mb-3">
                                            {{ form_label(formAccount.cp_traduction) }}
                                            {{ form_widget(formAccount.cp_traduction, {'attr': {'class': 'form-control'}}) }}
                                        </div>


                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{ form_end(formAccount) }}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-dark" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-success" id="submitAccountForm">Save changes</button>
                </div>
            </div>
        </div>
    </div>
  </div>





    {% block javascripts %}
        <script>
            window.onload = function () {
                var compteSelect = document.querySelectorAll('tbody [name*="compte"]');
                compteSelect.forEach(function (champ, index) {
                    ochange(index);
                });
            };

            function ochange(champId) {
                // Récupérer la valeur du champ de compte
                var valeurCompte = document.getElementById('compte_' + champId).value;
                // alert('La valeur du champ de compte ' + champId + ' a changé : ' + valeurCompte);

                fetch('/piece/comptable/getTiersForAccount/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ account_id: valeurCompte }),
                })
                    .then(response => response.json())
                    .then(data => {
                        // Mettre à jour la liste des tiers avec les données reçues du serveur
                        var row = document.querySelectorAll('tbody tr')[champId]; // Sélectionner la ligne correspondante
                        var tierSelect = row.querySelector('select[name*="tier"]');
                        tierSelect.innerHTML = ''; // Effacer les options existantes

                        data.forEach(tier => {
                            const option = document.createElement('option');
                            option.value = tier.id;
                            option.text = tier.name;
                            tierSelect.appendChild(option);
                        });

                    })
                    .catch(error => {
                        console.error('Erreur lors de la récupération des tiers:', error);
                    });
            }

            function deleteEcritures(ecritureId) {
                if (confirm("Êtes-vous sûr de vouloir supprimer cette écriture ?")) {
                    var rowToRemove = document.getElementById('ecriture_' + ecritureId);
                    if (rowToRemove) {
                        rowToRemove.remove();
                        calculateTotals();

                    }
                }
            }
            function changeMonnaie(idjournal) {
                fetch('/piece/comptable/getMonnaieForJournal/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ journal: idjournal }),
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Erreur lors de la récupération des données');
                        }
                        return response.json();
                    })
                    .then(data => {
                        const nouvelleMonnaieId = data.monnaie;
                        const monnaieSelect = $('#piece_comptable_monnaie');

                        // Sélectionner l'option correspondant à la nouvelle monnaie
                        monnaieSelect.val(nouvelleMonnaieId);
                    })
                    .catch(error => {
                        console.error('Erreur :', error);
                    });
            }

            function calculateTotals() {
                var debitTotal = 0;
                var creditTotal = 0;

                // Parcourir les lignes du tableau
                $('#ecritures tbody tr').each(function() {
                    var montant = parseFloat($(this).find('td:nth-child(3) input').val());
                    var sens = $(this).find('td:nth-child(4) select').val();

                    // Ajouter le montant à la colonne correspondante
                    if (sens === 'D') {
                        debitTotal += montant;
                    } else if (sens === 'C') {
                        creditTotal += montant;
                    }
                });
                // Afficher les totaux dans le pied de tableau
                $('#debitTotal').text(debitTotal.toFixed(2));
                $('#creditTotal').text(creditTotal.toFixed(2));
                $('#balance').text((debitTotal - creditTotal).toFixed(2));
            }


            document.addEventListener("DOMContentLoaded", function() {

                const tableBody = document.querySelector("#ecritures tbody");
                const addButton = document.querySelector("#ajouter-ecritures");
                $('#datetimepicker-minimum').datetimepicker();


                const table = $('#ecritures').DataTable({
                    paging: false,
                    searching: false,
                });

                var champsCompte = document.querySelectorAll('tbody [name*="compte"]');

                champsCompte.forEach(function(champ, index) {
                    champ.id = "compte_" + index; // Ajout d'un identifiant unique à chaque champ de compte
                    champ.addEventListener('change', function() {
                        ochange(champ.id, 1); // Appel de la fonction onchange avec l'identifiant unique
                    });
                });
                const inputFields = document.querySelectorAll('input[type="text"], input[type="number"], select');
                addEventListenersToInputs(inputFields);

                addButton.addEventListener("click", function() {
                    addEcritureRow(tableBody);
                });

                $('.toggle-column').on('change', function() {
                    // Obtenez le numéro de colonne de la case à cocher
                    var column = table.column($(this).attr('data-column'));

                    // Afficher ou masquer la colonne en fonction de l'état de la case à cocher
                    column.visible(!column.visible());
                });


                const form = document.querySelector('#form_piece'); // Sélectionner le formulaire par son ID

                form.addEventListener('submit', async function(event) {
                    event.preventDefault(); // Empêcher la soumission automatique du formulaire
                    const submitButton = document.querySelector('button[type="submit"]'); // Sélectionner le bouton soumettre
                    const submitButton2 = document.getElementById('buttonsubmit2'); // Sélectionner le bouton soumettre par l'ID
                    submitButton2.disabled = true;
                    const rows = document.querySelectorAll('tbody tr'); // Sélectionner toutes les lignes du tableau
                    submitButton.disabled = true;

                    var numeropc = $("#piece_comptable_numero_pc").val();
                    var idpc = $("#piece_comptable_id").val();
                    var journal = $("#piece_comptable_journal").val();
                    var datepiece = $("#piece_comptable_datepiece").val();
                    let totalDebit = 0;
                    let totalCredit = 0;

                    for (const row of rows) {
                        const montantInput = row.querySelector('input[name*="montant"]'); // Trouver l'input de montant dans la ligne
                        const SensSelect = row.querySelector('select[name*="sens"]'); // Trouver le select de sens dans la ligne

                        if (montantInput && SensSelect) { // Vérifier si les éléments existent
                            if (SensSelect.value === 'D') {
                                totalDebit += Number(montantInput.value);
                            } else {
                                totalCredit += Number(montantInput.value);
                            }
                        }
                    }
                    if (totalDebit !== totalCredit) {
                        submitButton.disabled = false;
                        submitButton2.disabled = false;
                        alert("Attention PC non équilibré !");
                    } else {
                        if (numeropc !== '') {
                            try {
                                var verifnpc = await verifnumpc(numeropc, idpc, journal);
                                if (verifnpc === 1) {
                                    submitButton.disabled = false;
                                    submitButton2.disabled = false;

                                    alert("Le numéro du PC existe.");
                                    return;
                                }
                                else{
                                    form.submit(); // Soumettre le formulaire si la vérification de montant réussit
                                }
                            } catch (error) {
                                console.error('Erreur lors de la vérification du numéro de PC :', error);
                            }
                        } else {
                            try {
                                const response = await fetch('/piece/comptable/addnumero/', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ journal: journal,datepiece : datepiece }),
                                });

                                if (!response.ok) {
                                    throw new Error('Erreur lors de la vérification du numéro de PC');
                                }
                                const data = await response.json();
                                var numeropc = $("#piece_comptable_numero_pc").val(data.numeroPc);
                                form.submit(); // Soumettre le formulaire si la vérification de montant réussit
                            } catch (error) {
                                console.error('Erreur lors de la vérification du numéro de PC :', error);
                                throw error;
                            }
                        }
                    }
                });

                // Function to handle submission of the account form via AJAX
                var urlNewCompte = "{{ path('app_compte_new') }}";
                document.getElementById('submitAccountForm').addEventListener('click', function() {
                    const submitButton = document.getElementById('submitAccountForm'); // Sélectionner le bouton soumettre par l'ID
                    submitButton.disabled = true;

                    // Perform form validation
                    if (validateForm()) {
                        // Serialize the form data
                        const formData = new FormData(document.getElementById('account_form'));

                        // Send an AJAX request to add the account
                        fetch(urlNewCompte, {
                            method: 'POST',
                            body: formData
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to add account');
                                }
                                if (response.status === 200) {
                                    // Reload the page
                                    location.reload();
                                }
                                // Parse JSON response
                                return response.json();
                            })
                            .then(data => {
                                // Hide modal
                                $('#createAccountModal').modal('hide');
                                location.reload();
                            })
                            .catch(error => {
                                console.error('Error:', error);
                            });
                    } else {
                        submitButton.disabled = false;
                    }
                });
                calculateTotals();

                // Calculer les totaux à chaque changement dans le tableau
                $('#ecritures tbody').on('change', 'input, select', function() {
                    calculateTotals();
                });

                // Ajouter une ligne si le tableau est vide
                if (tableBody.querySelectorAll("tr").length==1 || tableBody.querySelectorAll("tr").length<=0 ) {
                    addEcritureRow(tableBody);
                }
                function addEcritureRow(tableBody) {
                    const prototype = tableBody.dataset.prototype;
                    const index = tableBody.querySelectorAll("tr").length;
                    const newRow = document.createElement("tr");

                    // Remplacer les placeholders et diviser en éléments distincts
                    const replacedHTML = prototype.replace(/__name__/g, index);
                    const elements = document.createElement('div');
                    elements.innerHTML = replacedHTML;

                    // Ajouter la classe "form-control" aux éléments de formulaire
                    elements.querySelectorAll('input,select').forEach(element => {
                        element.classList.add('form-control');
                        const cell = document.createElement('td');
                        cell.appendChild(element);
                        newRow.appendChild(cell);

                        // Ajouter l'événement onchange au champ de compte
                        if (element.name.includes('compte')) {
                            element.addEventListener('change', function() {
                                ochange(element.id, 3); // Appel de la fonction onchange avec l'identifiant unique
                            });
                        }
                    });

                    // Ajouter le bouton de suppression à la nouvelle ligne
                    const deleteButton = document.createElement("button");
                    deleteButton.type = "button";
                    deleteButton.className = "btn";
                    deleteButton.innerHTML = '<i class="fas fa-trash"></i> ';
                    deleteButton.addEventListener("click", function() {
                        newRow.remove();
                        calculateTotals();

                    });

                    const actionCell = document.createElement("td");
                    actionCell.appendChild(deleteButton);
                    newRow.appendChild(actionCell);

                    // Ajouter la nouvelle ligne à la table
                    tableBody.appendChild(newRow);

                    const newInputs = newRow.querySelectorAll('input[type="text"], input[type="number"], select');
                    addEventListenersToInputs(newInputs);
                }
                async function verifnumpc(numeroPc, idpc, journal) {
                    try {
                        const response = await fetch('/piece/comptable/verifnumpc/', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ numeroPc: numeroPc, idpc: idpc, journal: journal }),
                        });

                        if (!response.ok) {
                            throw new Error('Erreur lors de la vérification du numéro de PC');
                        }

                        const data = await response.json();
                        if (data.exists === 1) {
                            return 1;
                        } else {
                            return 0;
                        }
                    } catch (error) {
                        console.error('Erreur lors de la vérification du numéro de PC :', error);
                        throw error;
                    }
                }

                // Fonction pour vérifier si tous les champs d'une ligne sont remplis
                function isRowFilled(row) {
                    const inputs = row.querySelectorAll(' input[type="number"], select');
                    for (let input of inputs) {
                        if (!input.value) {
                            return false;
                        }
                    }
                    return true;
                }
                // Fonction pour ajouter les écouteurs d'événements aux champs d'entrée
                function addEventListenersToInputs(inputs) {
                    inputs.forEach(input => {
                        input.addEventListener('keydown', function(event) {
                            if (event.key === 'Enter') {
                                event.preventDefault();
                                event.stopPropagation();

                                // Trouver la dernière ligne existante dans le tableau
                                const lastRow = tableBody.querySelector('tr:last-child');

                                // Si aucune ligne n'existe, ajouter une nouvelle ligne
                                if (!lastRow || isRowFilled(lastRow)) {
                                    addEcritureRow(tableBody);
                                }
                            }
                        });
                    });
                }
                function calculateTotals() {
                    var debitTotal = 0;
                    var creditTotal = 0;

                    // Parcourir les lignes du tableau
                    $('#ecritures tbody tr').each(function() {
                        var montant = parseFloat($(this).find('td:nth-child(3) input').val());
                        var sens = $(this).find('td:nth-child(4) select').val();

                        // Ajouter le montant à la colonne correspondante
                        if (sens === 'D') {
                            debitTotal += montant;
                        } else if (sens === 'C') {
                            creditTotal += montant;
                        }
                    });

                    // Afficher les totaux dans le pied de tableau
                    $('#debitTotal').text(debitTotal.toFixed(2));
                    $('#creditTotal').text(creditTotal.toFixed(2));
                    $('#balance').text((debitTotal - creditTotal).toFixed(2));
                }

                function validateForm() {
                    const cpCodeValue = document.getElementById('compte_cp_code').value;
                    const cpLibValue = document.getElementById('compte_cp_lib').value;
                    const cp_type_tiers = document.getElementById('compte_cp_type_tiers').value;
                    const societe = document.getElementById('compte_societe').value;
                    if (cpCodeValue.trim() === '' || cpLibValue.trim() === '' || cp_type_tiers.trim() === '' || societe.trim() === '') {
                        // Show error message or handle invalid fields
                        alert('Veuillez remplir tous les champs.');
                        return false;
                    }
                    return true; // Return true if form is valid
                }


                function ochange(champId, nbsplit) {
                    // Récupérer la valeur du champ de compte
                    var valeurCompte = document.getElementById(champId).value;
                    // alert('La valeur du champ de compte ' + champId + ' a changé : ' + valeurCompte);

                    fetch('/piece/comptable/getTiersForAccount/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ account_id: valeurCompte }),
                    })
                        .then(response => response.json())
                        .then(data => {
                            // Mettre à jour la liste des tiers avec les données reçues du serveur
                            var index = parseInt(champId.split('_')[nbsplit]); // Récupérer l'index de la ligne à partir de l'identifiant
                            var row = document.querySelectorAll('tbody tr')[index]; // Sélectionner la ligne correspondante
                            var tierSelect = row.querySelector('select[name*="tier"]');
                            tierSelect.innerHTML = ''; // Effacer les options existantes
                            const option = document.createElement('option');
                            option.value = '';
                            option.text = 'Choisissez un Tier';
                            tierSelect.appendChild(option);
                            data.forEach(tier => {
                                const option = document.createElement('option');
                                option.value = tier.id;
                                option.text = tier.name;
                                tierSelect.appendChild(option);
                            });
                        })
                        .catch(error => {
                            console.error('Erreur lors de la récupération des tiers:', error);
                        });
                }
            });
        </script>
    {% endblock %}
